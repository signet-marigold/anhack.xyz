@mixin btn-base {
	font-size: $font-size-sm;
	text-decoration: none;
	cursor: pointer;
	display: inline-block;
	border: 0;
	border-radius: $base-border-radius;
	font-weight: 600;
}
@mixin btn {
	border: $base-border-thickness $gray-800 solid;
	padding: $btn-padding-vertical $btn-padding-horizontal;
	box-shadow:
		inset $base-border-thickness *  2 $base-border-thickness *  2 0 rgba(255, 255, 255, 0.6),
		inset $base-border-thickness * -2 $base-border-thickness * -2 0 rgba(0, 0, 0, 0.6);
}
@mixin btn-outlined {
	margin: $base-border-thickness;
	padding: $btn-padding-vertical - $base-border-thickness * 2 $btn-padding-horizontal - $base-border-thickness * 2;
	box-shadow:
		inset $base-border-thickness *  2 $base-border-thickness *  2 0 rgba(0, 0, 0, 0.6),
		inset $base-border-thickness * -1 $base-border-thickness * -1 0 rgba(255, 255, 255, 0.6);
}
button {
	color: $black;
	background-color: $gray-100;
	&:hover {
		background-color: $white;
	}
	&:active {
		background-color: $gray-200;
	}
}
button,
*[class^="btn-"] {
	@include btn-base;
	@include btn;
}
*[class^="btn-outlined-"] {
	@include btn-outlined;
}

// Create button color classes
//
// Note: recalculating light and dark color values
// Fix: pull light and dark color values from available maps
@each $map in ($colors, $grays) {
	@each $key, $val in $map {
		$light-color: lighten-color($val);
		$dark-color:  darken-color($val);
		.btn-#{$key} {
			color: set-color($val);
			background-color: $val;
			&:hover {
				color: set-color($light-color);
				background-color: $light-color;
			}
			&:active {
				color: set-color($dark-color);
				background-color: $dark-color;
			}
		}
		.btn-outlined-#{$key} {
			border: $base-border-thickness * 2 solid $val;
			color: $val;
			background-color: transparent;
			&:hover {
				color: $light-color;
				border-color: $light-color;
				background-color: transparent;
			}
			&:active {
				color: $dark-color;
				border-color: $dark-color;
				background-color: transparent;
			}
		}
	}
}
