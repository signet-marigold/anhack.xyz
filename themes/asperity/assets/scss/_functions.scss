@function pow($number, $exponent) {
	$value: 1;

	@if $exponent > 0 {
		@for $i from 1 through $exponent {
			$value: $value * $number;
		}
	}

	@return $value;
}

/// Returns the luminance of `$color` as a float (between 0 and 1)
/// 1 is pure white, 0 is pure black
/// @param {Color} $color - Color
/// @return {Number}
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference
@function luminance($color) {
	$colors: (
		'red': red($color),
		'green': green($color),
		'blue': blue($color)
	);

	@each $name, $value in $colors {
		$adjusted: 0;
		$value: $value / 255;

		@if $value < 0.03928 {
			$value: $value / 12.92;
		} @else {
			$value: ($value + .055) / 1.055;
			$value: pow($value, 2.4);
		}

		$colors: map-merge($colors, ($name: $value));
	}

	@return (map-get($colors, 'red') * .2126) + (map-get($colors, 'green') * .7152) + (map-get($colors, 'blue') * .0722);
}

@function set-color($color) {
	@if (luminance($color) > 0.2) {
		@return $black;
	}
	@else {
		@return $white;
	}
}

// Helper function because sass does not have an actual saturation adjustment
@function full-saturation($color, $mix: 100%) {
	@return mix(hsl(hue($color), 100%, 50%), $color, $mix)
}

@function lighten-color($color) {
	@return lighten(
		scale-color($color,
			$red:    10,
			$green:  0,
			$blue:  -15
		), 15%);
}

@function darken-color($color) {
	@return darken(
		scale-color($color,
			$red:    15,
			$green: -10,
			$blue:  -10
		), 28%);
}

@function toRGB($color) {
	@return "rgb(" + red($color) + ", " + green($color) + ", " + blue($color)+ ")";
}

// Keeps the value clamped at positive zero.
// ` |($var / 2)| + ($var / 2) `
// - if $var is potitive then nothing happens in this transformation
// - but if $var is negative both sides cancel out and become zero
@function clamp-to-zero($num) {
	$half: $num * 0.5;
	@return abs($half) + $half;
}

@mixin imgdiv($filepath) {
	background: url($filepath) no-repeat center / cover;
	padding-top: image-height($filepath) / image-width($filepath) * 100%;
}

/// Returns a shuffled map
/// @param {Map} $map
/// @return {Map}
@function shuffle($map) {
	// Element is selected randomly from the input map and is added to a new empty map.
	// Selected element is then removed from the input map and the length variable is decremented.
	$l: length($map);
	$shuffled_map: ();
	@for $i from 1 through $l {
		$r: random($l);

		$key: nth(nth($map, $r), 1);
		$val: nth(nth($map, $r), 2);

		$shuffled_map: map-merge($shuffled_map, ($key:$val));

		$map: map-remove($map, $key);
		$l: $l - 1;
	}
	@return $shuffled_map;
}

// Multi-color nth selector
@mixin multi-color-list($color-map, $property, $property-options:"", $child-selector:"") {
	$l: length($color-map);
	@for $i from 1 through $l {
		&:nth-child(#{$l}n + #{$i}) #{$child-selector} {
			#{$property}: #{$property-options} nth(nth($color-map, $i), 2);
		}
	}
}
